#BlueJ class context
comment0.target=Fox
comment0.text=\r\n\ A\ simple\ model\ of\ a\ fox.\r\n\ Foxes\ age,\ move,\ eat\ rabbits,\ and\ die.\r\n\ \r\n\ @author\ David\ J.\ Barnes\ and\ Michael\ K\u00F6lling\r\n\ @version\ 2016.02.29\r\n
comment1.params=randomAge\ field\ location
comment1.target=Fox(boolean,\ Field,\ Location)
comment1.text=\r\n\ Create\ a\ fox.\ A\ fox\ can\ be\ created\ as\ a\ new\ born\ (age\ zero\r\n\ and\ not\ hungry)\ or\ with\ a\ random\ age\ and\ food\ level.\r\n\ \r\n\ @param\ randomAge\ If\ true,\ the\ fox\ will\ have\ random\ age\ and\ hunger\ level.\r\n\ @param\ field\ The\ field\ currently\ occupied.\r\n\ @param\ location\ The\ location\ within\ the\ field.\r\n
comment10.params=newFoxes
comment10.target=void\ giveBirth(java.util.List)
comment10.text=\r\n\ Check\ whether\ or\ not\ this\ fox\ is\ to\ give\ birth\ at\ this\ step.\r\n\ New\ births\ will\ be\ made\ into\ free\ adjacent\ locations.\r\n\ @param\ newFoxes\ A\ list\ to\ return\ newly\ born\ foxes.\r\n
comment11.params=
comment11.target=int\ breed()
comment11.text=\r\n\ Generate\ a\ number\ representing\ the\ number\ of\ births,\r\n\ if\ it\ can\ breed.\r\n\ @return\ The\ number\ of\ births\ (may\ be\ zero).\r\n
comment12.params=
comment12.target=boolean\ canBreed()
comment12.text=\r\n\ A\ fox\ can\ breed\ if\ it\ has\ reached\ the\ breeding\ age.\r\n
comment13.params=
comment13.target=void\ setDead()
comment13.text=\r\n\ Indicate\ that\ the\ fox\ is\ no\ longer\ alive.\r\n\ It\ is\ removed\ from\ the\ field.\r\n
comment2.params=newFoxes
comment2.target=void\ hunt(java.util.List)
comment2.text=\r\n\ This\ is\ what\ the\ fox\ does\ most\ of\ the\ time\:\ it\ hunts\ for\r\n\ rabbits.\ In\ the\ process,\ it\ might\ breed,\ die\ of\ hunger,\r\n\ or\ die\ of\ old\ age.\r\n\ @param\ field\ The\ field\ currently\ occupied.\r\n\ @param\ newFoxes\ A\ list\ to\ return\ newly\ born\ foxes.\r\n
comment3.params=
comment3.target=boolean\ isAlive()
comment3.text=\r\n\ Check\ whether\ the\ fox\ is\ alive\ or\ not.\r\n\ @return\ True\ if\ the\ fox\ is\ still\ alive.\r\n
comment4.params=
comment4.target=Location\ getLocation()
comment4.text=\r\n\ Return\ the\ fox's\ location.\r\n\ @return\ The\ fox's\ location.\r\n
comment5.params=newLocation
comment5.target=void\ setLocation(Location)
comment5.text=\r\n\ Place\ the\ fox\ at\ the\ new\ location\ in\ the\ given\ field.\r\n\ @param\ newLocation\ The\ fox's\ new\ location.\r\n
comment6.params=
comment6.target=void\ incrementAge()
comment6.text=\r\n\ Increase\ the\ age.\ This\ could\ result\ in\ the\ fox's\ death.\r\n
comment7.params=
comment7.target=void\ incrementHunger()
comment7.text=\r\n\ Make\ this\ fox\ more\ hungry.\ This\ could\ result\ in\ the\ fox's\ death.\r\n
comment8.params=
comment8.target=Location\ findFod()
comment8.text=\r\n\ Look\ for\ rabbits\ adjacent\ to\ the\ current\ location.\r\n\ Only\ the\ first\ live\ rabbit\ is\ eaten.\r\n\ @return\ Where\ food\ was\ found,\ or\ null\ if\ it\ wasn't.\r\n\ \r\n\ Exercise\ 12.20.\ Moved\ the\ "return\ where;"\ so\ that\ if\ there\ is\ not\ a\r\n\ rabbit\ in\ a\ block,\ it\ will\ move\ the\ fox\ to\ the\ next\ location.\ I\ am\ not\r\n\ 100%\ sure\ it\ is\ what\ the\ book\ is\ asking.\r\n\ \r\n\ See\ second\ attempt\ below.\r\n
comment9.params=
comment9.target=Location\ findFood()
comment9.text=\r\n\ Exercise\ 12.20.\ This\ attempt\ now\ searches\ all\ adjacent\ locations\r\n\ surrouding\ the\ fox\ using\ the\ field.adjacentLocations\ method.\ I\ moved\r\n\ the\ where\ variable\ outside\ of\ the\ while\ loop\ so\ it\ could\ be\ returned.\r\n\ \r\n\ The\ loop\ checks\ each\ block\ for\ an\ instance\ of\ Rabbit,\ if\ true,\r\n\ it\ checks\ if\ the\ rabbit\ is\ alive,\ kills\ it,\ and\ saves\ the\ location\ of\ \r\n\ the\ rabbit.\ If\ no\ animal\ is\ found\ or\ if\ the\ rabbit\ is\ dead,\ it\ will\r\n\ search\ the\ next\ block.\ If\ there\ are\ no\ animals\ found\ in\ adjacent\r\n\ blocks,\ it\ will\ return\ null.\r\n
numComments=14
